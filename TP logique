type prop = Vrai
            | Faux
            | Var of string
            | Non of prop
            | Ou of prop * prop
            | Xor of prop * prop
            | Et of prop * prop
            | Imp of prop * prop
            | Eq of prop * prop ;;

type valuation = (string*bool) list ;;

type nand_prop = VAR of string | NAND of nand_prop * nand_prop;;

let rec assoc s l = match l with
  | [] -> failwith "pas dans la liste"
  | t::q when (fst t = s) -> snd t
  | t::q -> assoc s q ;;

let rec evalue l prop = match prop with
  | Vrai -> true
  | Faux -> false
  | Var(x) -> assoc x l
  | Non(p) -> not(evalue l p)
  | Ou(p1, p2) -> ((evalue l p1) || (evalue l p2))
  | Et(p1, p2) -> ((evalue l p1) && (evalue l p2))
  | Imp(p1, p2) -> (not(evalue l p1) || (evalue l p2))
  | Eq(p1, p2) -> ((not(evalue l p1) || (evalue l p2))&&(not(evalue l p2) || (evalue l p1)))
  | Xor(p1, p2) -> (((evalue l p1)||(evalue l p2))&&(not((evalue l p1)&&(evalue l p2))));;

let rec prop_to_nand prop = match prop with
  | Non(p) -> NAND((prop_to_nand p),(prop_to_nand p))
  | Et(p1, p2) -> NAND(NAND((prop_to_nand p1),(prop_to_nand p2)),NAND((prop_to_nand p1),(prop_to_nand p2)))
  | Ou(p1, p2) -> NAND(NAND((prop_to_nand p1),(prop_to_nand p1)),NAND((prop_to_nand p2),(prop_to_nand p2)))
  | Xor(p1, p2) -> prop_to_nand(Et(Ou(p1,p2),Non(Et(p1,p2))))
  | Imp(p1, p2) -> prop_to_nand(Ou(Non(p1),p2))
  | Eq(p1, p2) -> prop_to_nand(Et(Imp(p1, p2),Imp(p2, p1)))
  | Var(x) -> VAR(x)
  | Vrai -> let p = Var("lol") in
                prop_to_nand(Ou(Non(p),p))
  | Faux -> prop_to_nand(Non(Vrai));;

let rec mem x l = match l with
  | [] -> false
  | t::q when (t = x) -> true
  | t::q -> mem x q ;;

let list_var prop =
  let rec aux p l = match p with
    | Var(x) -> [x]
    | Non(p) -> (aux p l)
    | Et(p1, p2) -> (aux p1 l) @ (aux p2 l)
    | Ou(p1, p2) -> (aux p1 l) @ (aux p2 l)
    | Eq(p1, p2) -> (aux p1 l) @ (aux p2 l)
    | Imp(p1, p2) -> (aux p1 l) @ (aux p2 l)
    | Xor(p1, p2) -> (aux p1 l) @ (aux p2 l)
    | Vrai -> []
    | Faux -> []
  in aux prop [] ;;

let rec substitue prop x b = match prop with
  | Var(y) when (x = y) -> if b=true then Vrai else Faux
  | Non(p) -> Non(substitue p x b)
  | Et(p1, p2) -> Et(substitue p1 x b, substitue p2 x b)
  | Ou(p1, p2) -> Ou(substitue p1 x b, substitue p2 x b)
  | Eq(p1, p2) -> Eq(substitue p1 x b, substitue p2 x b)
  | Imp(p1, p2) -> Imp(substitue p1 x b, substitue p2 x b)
  | Xor(p1, p2) -> Xor(substitue p1 x b, substitue p2 x b)
  | p -> p ;;

let tautologie prop =
  let liste = list_var prop in 
      let rec aux l prop = match l with
        |t::q -> ((evalue (substitue t true))&&(evalue (substitue t false)))
